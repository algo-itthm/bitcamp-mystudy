휴가: 5층 행정데스크 방문신청
wifi: Aipalm202_2G / aipalm_202
웨일온: 210 866 3081 / 111222
엄진영 강사님: jinyoung.eom@gmail.com
Git: https://github.com/eomjinyoung/bitcamp-study



2024-05-24(금)
CPU가 RAM에서 명령과 데이터를 받아 처리, 이때 명령과 데이터를 S/W로 칭함

S/W는 System S/W와 Application S/W로 구분
  - System S/W: H/W 제어 (OS, 드라이버, 임베디드, IoT 등)
  - Application S/W
    > Standalone: 외부 S/W의 도움 없이 실행 (MS Office, Photoshop 등)
    > Client/Server: 외부 S/W와 통신 필요 (카카오톡, 메일 등)
       설치형과 비설치형으로 세부 구분되며, 그 중 비설치형인 Web Application이 수업목표

Web Application
  - 웹브라우저가 웹서버로부터 HTML, CSS, JS, images 등을 내부적으로 다운받아 실행
  - 정적 파일을 그냥 다운받을 수도 있지만, java 등을 통해 동적으로 작성하여 다운받을 수 있음

CLI: Command Line Interface / 글자를 이용하여 명령을 내리는 방식


2024-05-27(월)
GIT: 소프트웨어 형상관리 시스템 (S/W Configuration Management System / SCM)
  - 버전관리라고도 칭하는데, 버전이란 변경에 대해 번호를 부여하는 것
  - clone. add, commit, push, pull
  - .gitignore을 활용하여 백업대상에서 특정파일 제외 가능
  - 초기 commit 시 email, username 설정 필요 / 초기 push 시 username, password 설정
    github에서 access token 발행하여 사용

Virtual Box와 Vagrant 사용하여 가상 OS 띄우기

CPU, 기계어, OS의 관계
  - CPU는 동일하지만 OS가 다를 경우, 각 OS마다 요구하는 포맷이 다르기 때문에 각각의 OS에 맞추어 컴파일 필요
  - OS는 동일하지만 CPU가 다를 경우에도 각각의 CPU마다 별도 컴파일 필요


2024-05-28(화)
애플리케이션 개발 방식
  - 컴파일 : 소스코드 -> (컴파일) -> 기계어 -> (실행) -> OS
  - 인터프리트 : 소스코드 -> (로드) -> 인터프리터 -> (실행) -> OS
  - 하이브리드 : 자바의 경우 소스코드를 클래스로 컴파일한 후, JVM을 통해 인터프리트 방식으로 실행

  > 컴파일 방식은 OS에 따라 별도로 컴파일해야 한다는 단점이 있고
     인터프리트 방식은 실행할 때마다 소스파일이 있어야 하고, 매번 문법검사가 진행되어 속도 저하, 실행 전에는 문법 오류를 알 수 없음
  > 하이브리드 방식은 컴파일 시 문법 검사를 하며, 기계어와의 유사함으로 실행 속도가 빠르고 한번의 컴파일로 여러 OS에서 실행 가능

크롬은 V8 Javascript 엔진, Blink HTML/CSS 렌더링 엔진이 포함되어 있다.
  - Blink 엔진은 Safari에 있는 Webkit HTML/CSS 렌더링 엔진을 개선한 것

JRE (Java Runtime Environment) : JVM + 실행할 때 사용하는 도구
컴파일러, 디버거, 프로파일러, 문서생성기 등 개발관련 도구를 JRE와 합쳐 만든 것이 JDK

Java SE (Standard Edition) : JRE, ServerJRE, JDK
Java EE (Enterprise Edition) : 웹 App. 개발도구, 분산 App. 개발도구, 자원관리도구, 테스트용 서버 등
Java ME (Micro Edition) : Embedded App. 개발도구

EE 실행요건
1. 다중사용자가 이용 -> Servlet, JSP, JSTL, EL, JSF 등 Web App. 제작도구
2. App.의 분산 배치 -> 분산 컴포넌트 제작도구


2024-05-29(수)
VSCode Java 포매팅
  - 폰트는 네이버 D2Coding 폰트 사용
  - 저장 시 auto formatting 적용 (구글 기준)
  - code lens 해제, inlay hint 해제

javac -encoding UTF-8 [파일명]
  - 소스파일이 어떤 규칙에 따라 문자를 저장했는지 컴파일러에게 알려줌
javac -d [폴더경로] [파일명]
  - class 파일을 저장할 폴더 지정
java -classpath (-cp) [폴더경로] [파일명]
  - class 파일의 위치를 JVM에게 알려줌
javac -target [버전] [파일명]
  - 컴파일 후 실행할 버전을 지정

jdk-17까지는 Windows에서 한글이 들어간 java 파일을 컴파일하려 하면 오류 발생
  - vscode는 utf-8로 파일을 저장하지만 Windows는 MS949 형식으로 텍스트를 읽기 때문에
    소스파일이 MS949로 저장되었을 거라 추측 -> 컴파일 오류 발생
  - javac 에서 -encoding 옵션으로 해결

소스파일 폴더와 컴파일 결과파일 폴더 분리
  - 통상 소스파일은 src, 컴파일 결과는 bin 하위에 보관

개발관리
  - 개발관리의 편의를 위해 각 응용프로그램을 프로젝트로 구분

프로젝트와 디렉토리
  - 프로젝트별로 src 폴더. bin 폴더 구분
  - src 폴더는 main과 test로 구분, 하위에는 사용언어에 따라 java, kotlin 등으로 구분

Git 저장소와 프로젝트 폴더
  - 통상 저장소 하나당 프로젝트 하나
  - 하나의 저장소에 여러 프로젝트를 둘 경우, 저장소 단위로 버전이 관리되기 때문에
    개별 프로젝트 단위 관리가 어려움
  - 하나의 메인 프로젝트와 여러 서브 프로젝트를 두는 것은 가능

빌드란?
  - 소스코드를 실행 가능한 소프트웨어로 변환하는 과정
  - 컴파일 -> 링크 -> 테스트 -> 패키징 -> 배포
     API 문서 생성 포함
  - 자바는 빌드도구가 JDK를 통해 컴파일, API 문서생성, 단위테스트, 패키징(Jar) 등을 수행

  Ant : build.xml
  Maven : pom.xml / 의존 라이브러리 관리기능 추가
  Gradle : build.gradle / 빌드 과정을 정교하게 제어할 수 있도록 프로그래밍 언어로 빌드스크립트 작성
              gradle은 maven 호환이기 때문에 의존 라이브러리 저장소 사용 가능

  jar : java archive / 자바 실행과 관련된 파일을 한 파일로 묶은 것
  war : web archive
  tar : tape archive

  DSL : Domain-Specific Language

gradle init
gradle compileJava (컴파일만 수행)
gradle build (-i : info 출력)
gradle clean
gradle run (-q : 결과만 출력)


2024-05-30(목)
Java Class 파일은 16진수 바이트코드로 구성
  - sublime 텍스트 에디터를 사용해 HelloWorld.class 직접 작성 체험
  - javap = 클래스파일 분석

자바 기초 프로그래밍
  - 명령문 -> 함수 -> 클래스 -> 패키지 -> 모듈
  - 라이브러리 : 다른 개발자가 만들어 컴파일해 둔 코드 (.lib, .dll - Windows, .so - Linux, Unix)
  - 로더 : OS가 프로그램 실행 시 기계어를 메모리에 로딩해주고 main()을 호출하는 보조코드
  - C언어는 소스파일을 컴파일한 후 라이브러리와 묶어 실행파일로 linking


2024-05-31(금)
  - 어셈블리 한줄은 기계어 한줄과 매핑되기에, 통상 어셈블리 코딩을 기계어 코딩이라 칭함
  - C언어 컴파일 시 gcc는 어셈블리어로 컴파일하고, 어셈블러가 이를 기계어로 컴파일함
  - Java에서는 bytecode viewer에서 보이는 내용이 어셈블리어 역할을 암

자바 패키지
  - 클래스를 분류하는 문법

주석
  - /* */ traditional comment와 // end-of-line comment
  - /**  */ 형식으로 주석을 사용하면 javadoc 실행 시 API 문서를 만듦
  * API는 클래스나 메소드의 설명이 담긴 Interface 문서
javadoc -encoding UTF-8 -charset UTF-8 -d docs -sourcepath app/src/main/java com.eomcs.lang.ex02

Annotation
  - 컴파일러나 JVM에게 전달하는 특별한 정보
  - annotation 주석은 .class 파일에 포함될 수 있음

Literal
  - 값을 표현한 것
  - 상세 설명은 pdf 참고
  - 2진수는 0b, 8진수는 0, 16진수는 0x를 맨 앞에 붙여 표기
  - 부동소수점 지수 표기법: 숫자 뒤에 e + 지수







